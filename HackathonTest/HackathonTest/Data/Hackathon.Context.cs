//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HackathonTest.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HackathonEntities : DbContext
    {
        public HackathonEntities()
            : base("name=HackathonEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TestCase> TestCases { get; set; }
        public virtual DbSet<TestCaseExecution> TestCaseExecutions { get; set; }
        public virtual DbSet<WebElement> WebElements { get; set; }
    
        public virtual ObjectResult<GetTestCases_Result> GetTestCases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTestCases_Result>("GetTestCases");
        }
    
        public virtual ObjectResult<GetWebElements_Result> GetWebElements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWebElements_Result>("GetWebElements");
        }
    
        public virtual int InsertTestCaseExecution()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTestCaseExecution");
        }
    
        public virtual int InsertTestCases(string testCaseName, Nullable<bool> lastRunStatus, Nullable<bool> isExecuted)
        {
            var testCaseNameParameter = testCaseName != null ?
                new ObjectParameter("TestCaseName", testCaseName) :
                new ObjectParameter("TestCaseName", typeof(string));
    
            var lastRunStatusParameter = lastRunStatus.HasValue ?
                new ObjectParameter("LastRunStatus", lastRunStatus) :
                new ObjectParameter("LastRunStatus", typeof(bool));
    
            var isExecutedParameter = isExecuted.HasValue ?
                new ObjectParameter("IsExecuted", isExecuted) :
                new ObjectParameter("IsExecuted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTestCases", testCaseNameParameter, lastRunStatusParameter, isExecutedParameter);
        }
    
        public virtual int InsertWebElements(string elementName, string locator, string findElementMechanism, Nullable<bool> isMultipleElements, string inputType, string inputData)
        {
            var elementNameParameter = elementName != null ?
                new ObjectParameter("ElementName", elementName) :
                new ObjectParameter("ElementName", typeof(string));
    
            var locatorParameter = locator != null ?
                new ObjectParameter("Locator", locator) :
                new ObjectParameter("Locator", typeof(string));
    
            var findElementMechanismParameter = findElementMechanism != null ?
                new ObjectParameter("FindElementMechanism", findElementMechanism) :
                new ObjectParameter("FindElementMechanism", typeof(string));
    
            var isMultipleElementsParameter = isMultipleElements.HasValue ?
                new ObjectParameter("IsMultipleElements", isMultipleElements) :
                new ObjectParameter("IsMultipleElements", typeof(bool));
    
            var inputTypeParameter = inputType != null ?
                new ObjectParameter("InputType", inputType) :
                new ObjectParameter("InputType", typeof(string));
    
            var inputDataParameter = inputData != null ?
                new ObjectParameter("InputData", inputData) :
                new ObjectParameter("InputData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWebElements", elementNameParameter, locatorParameter, findElementMechanismParameter, isMultipleElementsParameter, inputTypeParameter, inputDataParameter);
        }
    }
}
